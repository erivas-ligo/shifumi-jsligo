{ parameter
    (or (or (pair %createSession (set %players address) (nat %total_rounds))
            (pair %play (pair (chest %action) (nat %roundId)) (nat %sessionId)))
        (or (pair %revealPlay
               (pair (chest_key %player_key) (nat %player_secret))
               (pair (nat %roundId) (nat %sessionId)))
            (nat %stopSession))) ;
  storage
    (pair (nat %next_session)
          (map %sessions
             nat
             (pair (pair (pair (timestamp %asleep) (map %board nat (option address)))
                         (pair (nat %current_round)
                               (map %decoded_rounds
                                  nat
                                  (list (pair (or %action (or (unit %cisor) (unit %paper)) (unit %stone)) (address %player))))))
                   (pair (pair (set %players address)
                               (or %result (or (unit %draw) (unit %inplay)) (address %winner)))
                         (pair (map %rounds nat (list (pair (chest %action) (address %player))))
                               (nat %total_rounds)))))) ;
  code { PUSH string "Wrong current round parameter" ;
         PUSH string "Failed to open chest" ;
         LAMBDA
           (pair (pair address (set address)) string)
           unit
           { DUP ;
             CDR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CDR ;
             DIG 2 ;
             CAR ;
             CAR ;
             MEM ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (or (or unit unit) address) (or (or unit unit) address))
           unit
           { PUSH string "this session is finished" ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             DIG 2 ;
             CAR ;
             COMPARE ;
             EQ ;
             IF { DROP ; UNIT } { FAILWITH } } ;
         LAMBDA
           (pair (pair (pair nat
                             (map nat
                                  (pair (pair (pair timestamp (map nat (option address)))
                                              (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                        (pair (pair (set address) (or (or unit unit) address))
                                              (pair (map nat (list (pair chest address))) nat)))))
                       nat)
                 (pair (pair (pair timestamp (map nat (option address)))
                             (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                       (pair (pair (set address) (or (or unit unit) address))
                             (pair (map nat (list (pair chest address))) nat))))
           (pair nat
                 (map nat
                      (pair (pair (pair timestamp (map nat (option address)))
                                  (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                            (pair (pair (set address) (or (or unit unit) address))
                                  (pair (map nat (list (pair chest address))) nat)))))
           { DUP ;
             CAR ;
             CAR ;
             DUP ;
             CDR ;
             DUP 3 ;
             CDR ;
             SOME ;
             DIG 3 ;
             CAR ;
             CDR ;
             UPDATE ;
             SWAP ;
             CAR ;
             PAIR } ;
         LAMBDA
           (pair nat
                 (pair nat
                       (map nat
                            (pair (pair (pair timestamp (map nat (option address)))
                                        (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                  (pair (pair (set address) (or (or unit unit) address))
                                        (pair (map nat (list (pair chest address))) nat))))))
           (pair (pair (pair timestamp (map nat (option address)))
                       (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                 (pair (pair (set address) (or (or unit unit) address))
                       (pair (map nat (list (pair chest address))) nat)))
           { DUP ;
             CDR ;
             CDR ;
             SWAP ;
             CAR ;
             GET ;
             IF_NONE { PUSH string "Unknown session" ; FAILWITH } {} } ;
         SWAP ;
         DUP ;
         DUG 2 ;
         LAMBDA
           (pair (lambda
                    (pair (pair (pair nat
                                      (map nat
                                           (pair (pair (pair timestamp (map nat (option address)))
                                                       (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                                 (pair (pair (set address) (or (or unit unit) address))
                                                       (pair (map nat (list (pair chest address))) nat)))))
                                nat)
                          (pair (pair (pair timestamp (map nat (option address)))
                                      (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                (pair (pair (set address) (or (or unit unit) address))
                                      (pair (map nat (list (pair chest address))) nat))))
                    (pair nat
                          (map nat
                               (pair (pair (pair timestamp (map nat (option address)))
                                           (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                     (pair (pair (set address) (or (or unit unit) address))
                                           (pair (map nat (list (pair chest address))) nat))))))
                 (pair (pair nat (set address))
                       (pair (pair (pair (pair timestamp (map nat (option address)))
                                         (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                   (pair (pair (set address) (or (or unit unit) address))
                                         (pair (map nat (list (pair chest address))) nat)))
                             (pair nat
                                   (map nat
                                        (pair (pair (pair timestamp (map nat (option address)))
                                                    (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                              (pair (pair (set address) (or (or unit unit) address))
                                                    (pair (map nat (list (pair chest address))) nat))))))))
           (pair (list operation)
                 (pair nat
                       (map nat
                            (pair (pair (pair timestamp (map nat (option address)))
                                        (pair nat (map nat (list (pair (or (or unit unit) unit) address)))))
                                  (pair (pair (set address) (or (or unit unit) address))
                                        (pair (map nat (list (pair chest address))) nat))))))
           { UNPAIR ;
             SWAP ;
             DUP ;
             CDR ;
             CAR ;
             DUP ;
             CDR ;
             CAR ;
             CAR ;
             DUP 3 ;
             CAR ;
             CDR ;
             ITER { PUSH bool False ; SWAP ; UPDATE } ;
             PUSH string
                  "No players have played in the current round, thus cannot deduce troller" ;
             PUSH nat 0 ;
             DUP 3 ;
             SIZE ;
             COMPARE ;
             GT ;
             IF { DROP } { FAILWITH } ;
             NIL address ;
             SWAP ;
             ITER { CONS } ;
             IF_CONS { SWAP ; DROP ; SOME } { NONE address } ;
             IF_NONE { PUSH string "option is None" ; FAILWITH } {} ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CDR ;
             CDR ;
             SWAP ;
             RIGHT (or unit unit) ;
             DUP 3 ;
             CDR ;
             CAR ;
             CAR ;
             PAIR ;
             PAIR ;
             SWAP ;
             CAR ;
             PAIR ;
             SWAP ;
             DUP ;
             DUG 2 ;
             CAR ;
             CAR ;
             DIG 2 ;
             CDR ;
             CDR ;
             PAIR ;
             PAIR ;
             EXEC ;
             NIL operation ;
             PAIR } ;
         SWAP ;
         APPLY ;
         DUP 8 ;
         CDR ;
         DIG 8 ;
         CAR ;
         IF_LEFT
           { DIG 2 ;
             DIG 7 ;
             DROP 2 ;
             IF_LEFT
               { DIG 2 ;
                 DIG 3 ;
                 DIG 4 ;
                 DIG 5 ;
                 DIG 6 ;
                 DROP 5 ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 DIG 2 ;
                 CDR ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 EMPTY_MAP nat (list (pair chest address)) ;
                 PAIR ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 DIG 2 ;
                 CDR ;
                 PAIR ;
                 PAIR ;
                 EMPTY_MAP nat (list (pair (or (or unit unit) unit) address)) ;
                 PUSH nat 1 ;
                 PAIR ;
                 EMPTY_MAP nat (option address) ;
                 PUSH int 600 ;
                 NOW ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 SWAP ;
                 DUP 3 ;
                 CAR ;
                 SWAP ;
                 SOME ;
                 SWAP ;
                 UPDATE ;
                 PUSH nat 1 ;
                 DIG 2 ;
                 CAR ;
                 ADD ;
                 PAIR ;
                 NIL operation ;
                 PAIR }
               { SWAP ;
                 DUP ;
                 DUP 3 ;
                 CDR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Not allowed to play this session" ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DIG 4 ;
                 DUP 4 ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 DUP 3 ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CDR ;
                 CAR ;
                 DIG 3 ;
                 CDR ;
                 CDR ;
                 DUP 3 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 DUP 5 ;
                 GET ;
                 IF_NONE
                   { DIG 2 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     NIL (pair chest address) ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     CONS ;
                     DIG 2 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE }
                   { PUSH string "You already have played for this round" ;
                     PUSH bool False ;
                     DUP 5 ;
                     DUP 8 ;
                     DUP 8 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     GET ;
                     IF_NONE
                       { DROP ; PUSH bool False }
                       { SWAP ;
                         CDR ;
                         SWAP ;
                         PAIR ;
                         PUSH bool False ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP ;
                                CAR ;
                                DUP ;
                                IF { SWAP ; DROP }
                                   { DROP ; SWAP ; DUP ; DUG 2 ; CDR ; SWAP ; CDR ; CDR ; COMPARE ; EQ } } ;
                         SWAP ;
                         DROP } ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DIG 3 ;
                     CDR ;
                     CDR ;
                     CAR ;
                     SWAP ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     CONS ;
                     SOME ;
                     DIG 2 ;
                     UPDATE } ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 PUSH int 600 ;
                 NOW ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 CDR ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 SWAP ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 CDR ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 EXEC ;
                 NIL operation ;
                 PAIR } }
           { IF_LEFT
               { DIG 2 ;
                 DROP ;
                 SWAP ;
                 DUP ;
                 DUP 3 ;
                 CDR ;
                 CDR ;
                 PAIR ;
                 DIG 3 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Not allowed to reveal this session" ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DIG 5 ;
                 DUP 4 ;
                 CDR ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 DUP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 CAR ;
                 SWAP ;
                 CAR ;
                 GET ;
                 IF_NONE { PUSH string "no actions registered" ; FAILWITH } {} ;
                 PUSH nat 0 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 ITER { SWAP ; PAIR ; PUSH nat 1 ; SWAP ; CAR ; ADD } ;
                 PUSH string "a player has not played" ;
                 SWAP ;
                 DUP 4 ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SIZE ;
                 COMPARE ;
                 EQ ;
                 IF { DROP } { FAILWITH } ;
                 SOME ;
                 SENDER ;
                 PAIR ;
                 LEFT (option chest) ;
                 LOOP_LEFT
                   { DUP ;
                     CAR ;
                     SWAP ;
                     CDR ;
                     IF_NONE
                       { DROP ; NONE chest ; RIGHT (pair address (option (list (pair chest address)))) }
                       { DUP ;
                         IF_CONS { SWAP ; DROP ; SOME } { NONE (pair chest address) } ;
                         IF_NONE
                           { DROP 2 ; NONE chest ; RIGHT (pair address (option (list (pair chest address)))) }
                           { DUP 3 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             CDR ;
                             COMPARE ;
                             EQ ;
                             IF { SWAP ;
                                  DIG 2 ;
                                  DROP 2 ;
                                  CAR ;
                                  SOME ;
                                  RIGHT (pair address (option (list (pair chest address)))) }
                                { DROP ;
                                  IF_CONS { DROP ; SOME } { NONE (list (pair chest address)) } ;
                                  SWAP ;
                                  PAIR ;
                                  LEFT (option chest) } } } } ;
                 IF_NONE { PUSH string "user has not played" ; FAILWITH } {} ;
                 DUP 4 ;
                 CAR ;
                 CDR ;
                 SWAP ;
                 DUP 5 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 OPEN_CHEST ;
                 IF_LEFT
                   { RIGHT (or unit unit) }
                   { IF { UNIT ; LEFT unit ; LEFT bytes } { UNIT ; RIGHT unit ; LEFT bytes } } ;
                 IF_LEFT
                   { IF_LEFT { DROP ; DIG 4 ; FAILWITH } { DROP ; DIG 4 ; FAILWITH } }
                   { DIG 5 ; DROP } ;
                 UNPACK (or (or (unit %cisor) (unit %paper)) (unit %stone)) ;
                 IF_NONE { PUSH string "Failed to unpack the payload" ; FAILWITH } {} ;
                 SENDER ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUP ;
                 DUG 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DUP 3 ;
                 CDR ;
                 CAR ;
                 DIG 3 ;
                 CDR ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CDR ;
                 DUP 5 ;
                 GET ;
                 IF_NONE
                   { DIG 2 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     NIL (pair (or (or unit unit) unit) address) ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     CONS ;
                     DIG 2 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE }
                   { PUSH string "You already have revealed your play for this round" ;
                     PUSH bool False ;
                     DUP 5 ;
                     DUP 8 ;
                     DUP 8 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     PAIR ;
                     PAIR ;
                     DUP ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 2 ;
                     CAR ;
                     CDR ;
                     GET ;
                     IF_NONE
                       { DROP ; PUSH bool False }
                       { SWAP ;
                         CDR ;
                         SWAP ;
                         PAIR ;
                         PUSH bool False ;
                         SWAP ;
                         DUP ;
                         DUG 2 ;
                         CAR ;
                         ITER { SWAP ;
                                PAIR ;
                                DUP ;
                                CAR ;
                                DUP ;
                                IF { SWAP ; DROP }
                                   { DROP ; SWAP ; DUP ; DUG 2 ; CDR ; SWAP ; CDR ; CDR ; COMPARE ; EQ } } ;
                         SWAP ;
                         DROP } ;
                     COMPARE ;
                     EQ ;
                     IF { DROP } { FAILWITH } ;
                     DIG 3 ;
                     CAR ;
                     CDR ;
                     CDR ;
                     SWAP ;
                     DIG 3 ;
                     DIG 3 ;
                     PAIR ;
                     CONS ;
                     SOME ;
                     DIG 2 ;
                     UPDATE } ;
                 SWAP ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 DUP ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 CDR ;
                 PUSH int 600 ;
                 NOW ;
                 ADD ;
                 PAIR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CDR ;
                 DIG 2 ;
                 CDR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 PAIR ;
                 DIG 2 ;
                 CAR ;
                 CAR ;
                 PAIR ;
                 PAIR ;
                 DUP ;
                 CAR ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 GET ;
                 IF_NONE { NIL (pair (or (or unit unit) unit) address) } {} ;
                 PUSH bool True ;
                 PAIR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CAR ;
                 ITER { SWAP ;
                        PAIR ;
                        DUP ;
                        CAR ;
                        UNPAIR ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        DIG 3 ;
                        CDR ;
                        DIG 3 ;
                        PAIR ;
                        PUSH bool False ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        CAR ;
                        ITER { SWAP ;
                               PAIR ;
                               DUP ;
                               CAR ;
                               DUP ;
                               IF { SWAP ; DROP }
                                  { DROP ; SWAP ; DUP ; DUG 2 ; CDR ; SWAP ; CDR ; CDR ; COMPARE ; EQ } } ;
                        SWAP ;
                        DROP ;
                        DIG 2 ;
                        AND ;
                        PAIR } ;
                 CAR ;
                 PUSH bool True ;
                 SWAP ;
                 COMPARE ;
                 EQ ;
                 IF { DUP ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      PUSH nat 1 ;
                      DUP 4 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      ADD ;
                      PAIR ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      DUP ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      DUP 4 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      DIG 4 ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      GET ;
                      IF_NONE { PUSH string "Missing actions for current_round" ; FAILWITH } {} ;
                      DUP ;
                      IF_CONS { SWAP ; DROP ; SOME } { NONE (pair (or (or unit unit) unit) address) } ;
                      IF_NONE { PUSH string "Missing actions for first player" ; FAILWITH } {} ;
                      SWAP ;
                      IF_CONS { DROP ; SOME } { NONE (list (pair (or (or unit unit) unit) address)) } ;
                      IF_NONE { PUSH string "Missing actions for second player" ; FAILWITH } {} ;
                      IF_CONS { SWAP ; DROP ; SOME } { NONE (pair (or (or unit unit) unit) address) } ;
                      IF_NONE { PUSH string "Missing actions for second player" ; FAILWITH } {} ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      IF_LEFT
                        { IF_LEFT
                            { DROP ;
                              DUP ;
                              CAR ;
                              IF_LEFT
                                { SWAP ;
                                  DROP ;
                                  IF_LEFT { DROP 2 ; NONE address } { DROP ; CDR ; SOME } }
                                { DIG 2 ; DROP 2 ; CDR ; SOME } }
                            { DROP ;
                              DUP ;
                              CAR ;
                              IF_LEFT
                                { DIG 2 ;
                                  DROP ;
                                  IF_LEFT { DROP ; CDR ; SOME } { DROP 2 ; NONE address } }
                                { DROP 2 ; CDR ; SOME } } }
                        { DROP ;
                          DUP ;
                          CAR ;
                          IF_LEFT
                            { IF_LEFT { DROP 2 ; CDR ; SOME } { DIG 2 ; DROP 2 ; CDR ; SOME } }
                            { DROP 3 ; NONE address } } ;
                      IF_NONE
                        { SWAP ; CAR ; CAR ; CDR ; NONE (option address) ; DIG 2 ; UPDATE }
                        { DIG 2 ; CAR ; CAR ; CDR ; SWAP ; SOME ; SOME ; DIG 2 ; UPDATE } ;
                      DIG 3 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      PAIR }
                    {} ;
                 DUP ;
                 CDR ;
                 CDR ;
                 CDR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 COMPARE ;
                 GT ;
                 IF { DUP ;
                      CDR ;
                      CDR ;
                      EMPTY_MAP address nat ;
                      DUP 3 ;
                      CAR ;
                      CAR ;
                      CDR ;
                      ITER { CDR ;
                             IF_NONE
                               {}
                               { SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 GET ;
                                 IF_NONE
                                   { SWAP ; PUSH nat 1 ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                                   { DIG 2 ; PUSH nat 1 ; DIG 2 ; ADD ; SOME ; DIG 2 ; UPDATE } } } ;
                      PUSH bool False ;
                      PUSH nat 0 ;
                      NONE address ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      ITER { SWAP ;
                             UNPAIR ;
                             UNPAIR ;
                             DUP ;
                             IF_NONE
                               { DROP 3 ;
                                 PUSH bool False ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 CDR ;
                                 DIG 2 ;
                                 CAR ;
                                 SOME ;
                                 PAIR ;
                                 PAIR }
                               { DROP ;
                                 SWAP ;
                                 DUP ;
                                 DUG 2 ;
                                 DUP 5 ;
                                 CDR ;
                                 COMPARE ;
                                 GT ;
                                 IF { DROP 3 ;
                                      PUSH bool False ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      CDR ;
                                      DIG 2 ;
                                      CAR ;
                                      SOME ;
                                      PAIR ;
                                      PAIR }
                                    { SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      DIG 4 ;
                                      CDR ;
                                      COMPARE ;
                                      EQ ;
                                      IF { DIG 2 ; DROP ; PUSH bool True ; DUG 2 ; PAIR ; PAIR }
                                         { PAIR ; PAIR } } } } ;
                      UNPAIR ;
                      CAR ;
                      SWAP ;
                      IF { DROP ; UNIT ; LEFT unit ; LEFT address }
                         { IF_NONE { UNIT ; LEFT unit ; LEFT address } { RIGHT (or unit unit) } } ;
                      DUP 3 ;
                      CDR ;
                      CAR ;
                      CAR ;
                      PAIR ;
                      PAIR ;
                      SWAP ;
                      CAR ;
                      PAIR }
                    {} ;
                 DIG 2 ;
                 CDR ;
                 CDR ;
                 DIG 2 ;
                 PAIR ;
                 PAIR ;
                 EXEC ;
                 NIL operation ;
                 PAIR }
               { DIG 4 ;
                 DIG 7 ;
                 DIG 8 ;
                 DROP 3 ;
                 SWAP ;
                 DUP ;
                 DUP 3 ;
                 PAIR ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 PUSH string "Not allowed to stop this session" ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SENDER ;
                 PAIR ;
                 PAIR ;
                 DIG 6 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 UNIT ;
                 RIGHT unit ;
                 LEFT address ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CAR ;
                 CDR ;
                 PAIR ;
                 DIG 5 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 PUSH string
                      "Must wait at least 600 seconds before claiming Victory (in case opponent is not playing)" ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CAR ;
                 CAR ;
                 CAR ;
                 NOW ;
                 COMPARE ;
                 GT ;
                 IF { DROP } { FAILWITH } ;
                 DUP ;
                 CDR ;
                 CAR ;
                 CAR ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 CDR ;
                 CDR ;
                 CAR ;
                 DUP 3 ;
                 CAR ;
                 CDR ;
                 CAR ;
                 GET ;
                 IF_NONE { NIL (pair chest address) } {} ;
                 ITER { CDR ; PUSH bool False ; SWAP ; UPDATE } ;
                 PUSH nat 0 ;
                 SWAP ;
                 DUP ;
                 DUG 2 ;
                 SIZE ;
                 COMPARE ;
                 GT ;
                 IF { DUG 2 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; EXEC }
                    { DROP ;
                      DUP ;
                      CAR ;
                      CDR ;
                      CDR ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CDR ;
                      CAR ;
                      GET ;
                      IF_NONE { PUSH string "SHOULD NOT BE HERE SESSION IS BROKEN" ; FAILWITH } {} ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CDR ;
                      CAR ;
                      CAR ;
                      SWAP ;
                      ITER { CDR ; PUSH bool False ; SWAP ; UPDATE } ;
                      PUSH nat 0 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      SIZE ;
                      COMPARE ;
                      GT ;
                      IF { DUG 2 ; PAIR ; SWAP ; DIG 2 ; PAIR ; PAIR ; EXEC }
                         { SWAP ; DIG 3 ; DIG 4 ; DROP 4 ; NIL operation ; PAIR } } } } } ;
  view "board"
       nat
       (map address nat)
       { DUP ;
         CDR ;
         CDR ;
         SWAP ;
         CAR ;
         GET ;
         IF_NONE
           { PUSH string "Unknown session" ; FAILWITH }
           { EMPTY_MAP address nat ;
             SWAP ;
             CAR ;
             CAR ;
             CDR ;
             ITER { CDR ;
                    IF_NONE
                      {}
                      { SWAP ;
                        DUP ;
                        DUG 2 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE
                          { SWAP ; PUSH nat 1 ; DIG 2 ; SWAP ; SOME ; SWAP ; UPDATE }
                          { DIG 2 ; PUSH nat 1 ; DIG 2 ; ADD ; SOME ; DIG 2 ; UPDATE } } } } } }

